A simple way of encrypting a message is to rearrange its characters. One way to rearrange the
characters is to pick out the characters at even indices, put them first in the encrypted string,
and follow them by the odd characters. For example, the string message would be encrypted
as msaeesg because the even characters are m, s, a, e (at indices 0, 2, 4, and 6) and the odd
characters are e, s, g (at indices 1, 3, and 5).

(a) Write a program that asks the user for a string and uses this method to encrypt the string.
(b) Write a program that decrypts a string that was encrypted with this method.
"""


Solution:


from sys import exit
from itertools import zip_longest

def encryption(message):
    even_enc = ''
    odd_enc = ''
    for i in range(len(message)):
        if i % 2 == 0:
            even_enc += message[i]
        else:
            odd_enc += message[i]
    encrypt = even_enc + odd_enc
    decryption(encrypt)        

def decryption(encrypt):
    decrypt = ''
    str_len = len(encrypt)
    if str_len % 2 == 0:
        i = int(str_len / 2)
        even_dec = encrypt[:i]
        odd_dec = encrypt[i:]
    else:
        i = int(((str_len + 1) / 2))
        even_dec = encrypt[:i]
        odd_dec = encrypt[i:]
    for (j, k) in zip_longest(even_dec, odd_dec):
        if j is not None:
            decrypt += j
        if k is not None:
            decrypt += k
        else:
            continue
    show(message, encrypt, decrypt)

def show(message, encrypt, decrypt):
    print('')
    print(f'The original message was {message}.')
    print(f'The encrypted message is {encrypt}.')
    print(f'The decypted message is {decrypt}.')
    print('')
    print('')

if __name__ == '__main__':
    choices = ['1', '2']
    while True:
        print('Welcome to the Simple Encryption and Decryption Program.')
        print('')
        print('Enter "1" to type in a string to encrypt and decrypt.')
        print('Enter "2" to exit the program.')
        print('')
        choice = ''
        while choice not in choices:
            choice = input('Enter your choice (1 or 2): ')
            continue
        if choice == '1':
            message = input('Please input your message: ')
            encryption(message)
        else:
            exit()


Explaination
1.from sys import exit: This line imports the exit function from the sys module. The exit function is used to terminate the program.
2.from itertools import zip_longest: This line imports the zip_longest function from the itertools module. zip_longest is used to iterate over multiple iterables in parallel, filling in missing values with a specified fill value.
3.def encryption(message):: This line defines a function named encryption that takes a single argument message.
4.even_enc = '' and odd_enc = '': These lines initialize two empty strings even_enc and odd_enc. These strings will be used to store even and odd characters of the input message, respectively.
5.for i in range(len(message)):: This line starts a loop iterating over the indices of the characters in the message.\
6.if i % 2 == 0:: This line checks if the current index i is even.
7.even_enc += message[i] and odd_enc += message[i]: These lines add the character at index i to either even_enc or odd_enc, depending on whether i is even or odd.
8.encrypt = even_enc + odd_enc: This line concatenates even_enc and odd_enc to form the encrypted message.
9.decryption(encrypt): This line calls the decryption function with the encrypted message as an argument.
10.def decryption(encrypt):: This line defines a function named decryption that takes a single argument encrypt.
11.decrypt = '': This line initializes an empty string decrypt to store the decrypted message.
12.str_len = len(encrypt): This line calculates the length of the encrypted message.
13.if str_len % 2 == 0:: This line checks if the length of the encrypted message is even.
14.i = int(str_len / 2) and i = int(((str_len + 1) / 2)): These lines calculate the index i at which to split the encrypted message into even and odd characters, depending on whether the length of the encrypted message is even or odd.
15.even_dec = encrypt[:i] and odd_dec = encrypt[i:]: These lines split the encrypted message into even and odd parts.
16.for (j, k) in zip_longest(even_dec, odd_dec):: This line starts a loop iterating over pairs of characters from even_dec and odd_dec using the zip_longest function.
17.if j is not None: and if k is not None:: These lines check if j and k are not None.
18.decrypt += j and decrypt += k: These lines add j and k to the decrypt string, respectively.
19.else: continue: This line continues the loop if both j and k are None.
20.show(message, encrypt, decrypt): This line calls the show function with the original message, encrypted message, and decrypted message as arguments.
21.def show(message, encrypt, decrypt):: This line defines a function named show that takes three arguments: message, encrypt, and decrypt.
22.print(f'The original message was {message}.'), print(f'The encrypted message is {encrypt}.'), print(f'The decrypted message is {decrypt}.'): These lines print out the original message, encrypted message, and decrypted message, respectively.
23.if __name__ == '__main__':: This line checks if the script is being run directly.
24.choices = ['1', '2']: This line defines a list choices containing the strings '1' and '2'.
25.while True:: This line starts an infinite loop.
26.choice = '' and while choice not in choices:: These lines initialize the choice variable to an empty string and start a loop that continues until the user's choice is either '1' or '2'.
27.if choice == '1':, message = input('Please input your message: '), and encryption(message): These lines prompt the user for input, store the input in the message variable, and then call the encryption function with the input message as an argument if the user chooses option '1'.
28else: exit(): This line exits the program if the user chooses option '2'.
.















